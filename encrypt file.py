# -*- coding: utf-8 -*-
"""Untitled79.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FPSAm-7rPeJcLqiZVjrwPxqCCcKO7yTw
"""

# Install dependencies
!pip install pycryptodome

# Imports
import os
import base64
from Crypto.Cipher import AES, DES, ARC4, ChaCha20, PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad
from google.colab import files
import ipywidgets as widgets
from IPython.display import display, clear_output

# Encryption functions
def encrypt_aes(key, plaintext):
    iv = get_random_bytes(16)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(pad(plaintext, AES.block_size))
    return iv + ciphertext, key

def encrypt_des(key, plaintext):
    iv = get_random_bytes(8)
    cipher = DES.new(key, DES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(pad(plaintext, DES.block_size))
    return iv + ciphertext, key

def encrypt_rc4(key, plaintext):
    cipher = ARC4.new(key)
    return cipher.encrypt(plaintext), key

def encrypt_chacha20(key, plaintext):
    nonce = get_random_bytes(12)
    cipher = ChaCha20.new(key=key, nonce=nonce)
    ciphertext = cipher.encrypt(plaintext)
    return nonce + ciphertext, key

def encrypt_rsa(plaintext):
    rsa_key = RSA.generate(2048)
    public_key = rsa_key.publickey()
    session_key = get_random_bytes(16)
    iv = get_random_bytes(16)
    cipher_aes = AES.new(session_key, AES.MODE_CBC, iv)
    ciphertext = cipher_aes.encrypt(pad(plaintext, AES.block_size))
    cipher_rsa = PKCS1_OAEP.new(public_key)
    encrypted_session_key = cipher_rsa.encrypt(session_key)
    return encrypted_session_key + iv + ciphertext, rsa_key.export_key()

# Widgets
upload = widgets.FileUpload(accept='', multiple=False)
algo_dropdown = widgets.Dropdown(
    options=['AES', 'DES', 'RC4', 'ChaCha20', 'RSA'],
    description='Algorithm:'
)
key_input = widgets.Text(
    value='',
    placeholder='Optional custom key (text or hex)',
    description='Key:'
)
run_button = widgets.Button(description='Encrypt to .bin')
output_box = widgets.Output()

display(widgets.VBox([upload, algo_dropdown, key_input, run_button, output_box]))

# Encryption handler
def on_encrypt_clicked(b):
    output_box.clear_output()

    if not upload.value:
        with output_box:
            print("❗ Please upload a file.")
        return

    file_data = list(upload.value.values())[0]
    filename = file_data['metadata']['name']
    content = file_data['content']
    algo = algo_dropdown.value
    user_key_input = key_input.value.strip()
    encrypted_data = b''
    final_key = None

    try:
        if algo == 'AES':
            key = bytes.fromhex(user_key_input) if len(user_key_input) in [32, 48, 64] else user_key_input.encode() if len(user_key_input.encode()) in [16, 24, 32] else get_random_bytes(16)
            encrypted_data, final_key = encrypt_aes(key, content)

        elif algo == 'DES':
            key = bytes.fromhex(user_key_input) if len(user_key_input) == 16 else user_key_input.encode()[:8] if len(user_key_input.encode()) >= 8 else get_random_bytes(8)
            encrypted_data, final_key = encrypt_des(key, content)

        elif algo == 'RC4':
            key = bytes.fromhex(user_key_input) if len(user_key_input) >= 10 else user_key_input.encode() if len(user_key_input.encode()) >= 5 else get_random_bytes(16)
            encrypted_data, final_key = encrypt_rc4(key, content)

        elif algo == 'ChaCha20':
            key = bytes.fromhex(user_key_input) if len(user_key_input) == 64 else user_key_input.encode()[:32] if len(user_key_input.encode()) >= 32 else get_random_bytes(32)
            encrypted_data, final_key = encrypt_chacha20(key, content)

        elif algo == 'RSA':
            encrypted_data, final_key = encrypt_rsa(content)

        # Save as .bin file
        bin_filename = f"{os.path.splitext(filename)[0]}_{algo}.bin"
        with open(bin_filename, 'wb') as f:
            f.write(encrypted_data)

        # Preview and download
        preview = base64.b64encode(encrypted_data[:64]).decode()
        with output_box:
            print(f"✅ Encrypted using {algo}")
            print(f"📥 Saved as: {bin_filename}")
            print(f"🔑 Key used: {final_key.hex() if hasattr(final_key, 'hex') else final_key}")
            print(f"📦 Preview (Base64): {preview}...")
        files.download(bin_filename)

    except Exception as e:
        with output_box:
            print(f"❌ Error: {e}")

run_button.on_click(on_encrypt_clicked)